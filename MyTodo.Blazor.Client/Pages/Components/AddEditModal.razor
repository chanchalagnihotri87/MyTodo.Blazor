<Modal @ref="modal" Title="@ModalTitle">

    <BodyTemplate>
        <EditForm @ref="addEditForm" OnValidSubmit="Submit" EditContext="editContext" >

            <DataAnnotationsValidator />

            @if (model is not null && model.Id > 0)
            {
                <InputNumber @bind-Value="model.Id" hidden></InputNumber>
            }
            <div class="form-group">
                <label for="title">Title</label>
                <InputText class="form-control" @bind-Value="model.Title"></InputText>
                <ValidationMessage For="@(() => model.Title)" />
            </div>
            <div class="modal-footer mt-4 pb-0 px-0">
                <button type="button"
                        class="btn btn-secondary"
                        data-dismiss="modal"
                        @onclick="HideModal">
                    Close
                </button>
                <button class="btn btn-primary">Save changes</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

@code {

    private EditForm addEditForm;

    private Modal modal;

    public async Task ShowModal()
    {
        await modal?.ShowAsync();
    }

    public async Task HideModal()
    {
        await modal?.HideAsync();
    }



    [Parameter]
    public string ModalDomain { get; set; }

    [Parameter]
    public AddEditFormModel model { get; set; }


    [Parameter]
    public EventCallback<AddEditFormModel> OnSubmit { get; set; }

    private string ModalTitle => (model.Id > 0 ? "Edit" : "Add") + " " + ModalDomain;

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(model);
        editContext.OnValidationRequested += EditContext_OnValidationRequested;
        messageStore = new ValidationMessageStore(editContext);
    }

    private void EditContext_OnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        messageStore?.Clear();

        if (string.IsNullOrEmpty(model.Title))
        {
            messageStore?.Add(() => model.Title, "Title is required");
        }
    }

    private async Task Submit()
    {
        await OnSubmit.InvokeAsync(model);
    }
}
